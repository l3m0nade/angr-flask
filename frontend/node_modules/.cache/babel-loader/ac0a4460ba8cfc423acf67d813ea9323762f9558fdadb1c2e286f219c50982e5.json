{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'BinaryUpload',\n  data() {\n    return {\n      selectedFile: null,\n      loading: false,\n      output: [{}],\n      analysis: [{\n        text: 'Result',\n        value: 'result'\n      }],\n      headers: [{\n        result: 'Name123'\n      }]\n    };\n  },\n  computed: {\n    valid() {\n      return !!this.selectedFile;\n    },\n    fileRules() {\n      return [value => {\n        if (!value) {\n          return 'File is required';\n        }\n        return true;\n      }];\n    }\n  },\n  methods: {\n    getResult() {},\n    onSubmit() {\n      let formData = new FormData();\n      formData.append('file', this.selectedFile);\n      this.loading = true;\n      axios.post('http://127.0.0.1:5000/upload_file', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(response => {\n        this.output = response.data.result.map(item => ({\n          result: item\n        }));\n        //console.log(this.output);\n      }).catch(error => {\n        console.error(error);\n      }).finally(() => {\n        this.loading = false;\n        this.$refs.myTable.items[rowIndex].columnName = newValue;\n        this.getResult();\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","selectedFile","loading","output","analysis","text","value","headers","result","computed","valid","fileRules","methods","getResult","onSubmit","formData","FormData","append","post","then","response","map","item","catch","error","console","finally","$refs","myTable","items","rowIndex","columnName","newValue"],"sources":["src/components/BinaryUpload.vue"],"sourcesContent":["<template>\n  \n    <v-container fluid>\n      <v-form @submit.prevent=\"onSubmit\" ref=\"fileID\" type=\"file\">\n        <v-file-input\n          v-model=\"selectedFile\"\n          label=\"Select file\"\n          \n          :rules=\"fileRules\"\n          outlined\n          required\n        ></v-file-input>\n        <v-btn\n          type=\"submit\"\n          color=\"primary\"\n          :loading=\"loading\"\n          :disabled=\"!valid\"\n        >\n          Upload\n        </v-btn>\n      </v-form>\n      <v-card>\n      <v-card-title>Output:</v-card-title>\n      <v-card-text>{{ output }}</v-card-text>\n      </v-card>\n\n      <v-data-table ref=\"MyTable\" :headers=\"analysis\" :items=\"output\"></v-data-table>\n\n      \n    </v-container>\n\n    \n    \n  </template>\n  \n  <script>\n  import axios from 'axios'\n  \n  export default {\n    name: 'BinaryUpload',\n    data () {\n      return {\n        selectedFile: null,\n        loading: false,\n        output:[{}],\n        analysis:[\n          {\n            text: 'Result', value: 'result'\n          }\n        ],\n        headers:[\n        {\n          result: 'Name123',\n          \n        }\n      ],\n\n      }\n    },\n    computed: {\n      valid () {\n        return !!this.selectedFile\n      },\n      fileRules () {\n        return [\n          value => {\n            if (!value) {\n              return 'File is required'\n            } \n            return true\n          }\n        ]\n      }\n    },\n    methods: {\n      getResult (){\n\n      },\n      onSubmit () {\n        let formData = new FormData()\n        formData.append('file', this.selectedFile)\n        this.loading = true\n        axios.post('http://127.0.0.1:5000/upload_file', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        }).then(response => {\n          this.output = response.data.result.map(item => ({result: item}));\n          //console.log(this.output);\n        }).catch(error => {\n          console.error(error);\n        }).finally(() => {\n        this.loading = false\n        this.$refs.myTable.items[rowIndex].columnName = newValue;\n        this.getResult()\n      })\n      }\n    }\n  }\n  \n</script>  "],"mappings":"AAoCA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,YAAA;MACAC,OAAA;MACAC,MAAA;MACAC,QAAA,GACA;QACAC,IAAA;QAAAC,KAAA;MACA,EACA;MACAC,OAAA,GACA;QACAC,MAAA;MAEA;IAGA;EACA;EACAC,QAAA;IACAC,MAAA;MACA,cAAAT,YAAA;IACA;IACAU,UAAA;MACA,QACAL,KAAA;QACA,KAAAA,KAAA;UACA;QACA;QACA;MACA,EACA;IACA;EACA;EACAM,OAAA;IACAC,UAAA,GAEA;IACAC,SAAA;MACA,IAAAC,QAAA,OAAAC,QAAA;MACAD,QAAA,CAAAE,MAAA,cAAAhB,YAAA;MACA,KAAAC,OAAA;MACAJ,KAAA,CAAAoB,IAAA,sCAAAH,QAAA;QACAR,OAAA;UACA;QACA;MACA,GAAAY,IAAA,CAAAC,QAAA;QACA,KAAAjB,MAAA,GAAAiB,QAAA,CAAApB,IAAA,CAAAQ,MAAA,CAAAa,GAAA,CAAAC,IAAA;UAAAd,MAAA,EAAAc;QAAA;QACA;MACA,GAAAC,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,CAAAA,KAAA;MACA,GAAAE,OAAA;QACA,KAAAxB,OAAA;QACA,KAAAyB,KAAA,CAAAC,OAAA,CAAAC,KAAA,CAAAC,QAAA,EAAAC,UAAA,GAAAC,QAAA;QACA,KAAAnB,SAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}